// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MentorCard should match the snapshot if no tech skills are passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MentorCard
    tech_skills={
      Array [
        "sql",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="mentors-card"
      >
        <p>
           
        </p>
        <div
          className="loc-lang"
        >
          <span
            className="loc"
          />
          <span
            className="lang"
          >
            
            sql
          </span>
        </div>
      </div>,
      "to": "/mentors/undefined",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
             
          </p>,
          <div
            className="loc-lang"
          >
            <span
              className="loc"
            />
            <span
              className="lang"
            >
              
              sql
            </span>
          </div>,
        ],
        "className": "mentors-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              " ",
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            undefined,
            " ",
            undefined,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="loc"
              />,
              <span
                className="lang"
              >
                
                sql
              </span>,
            ],
            "className": "loc-lang",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "loc",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "",
                  "sql",
                ],
                "className": "lang",
              },
              "ref": null,
              "rendered": Array [
                "",
                "sql",
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="mentors-card"
        >
          <p>
             
          </p>
          <div
            className="loc-lang"
          >
            <span
              className="loc"
            />
            <span
              className="lang"
            >
              
              sql
            </span>
          </div>
        </div>,
        "to": "/mentors/undefined",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
               
            </p>,
            <div
              className="loc-lang"
            >
              <span
                className="loc"
              />
              <span
                className="lang"
              >
                
                sql
              </span>
            </div>,
          ],
          "className": "mentors-card",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                " ",
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              undefined,
              " ",
              undefined,
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="loc"
                />,
                <span
                  className="lang"
                >
                  
                  sql
                </span>,
              ],
              "className": "loc-lang",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "loc",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "",
                    "sql",
                  ],
                  "className": "lang",
                },
                "ref": null,
                "rendered": Array [
                  "",
                  "sql",
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`MentorCard should match the snapshot if tech skills are passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MentorCard
    tech_skills={
      Array [
        "javascript",
        "ruby",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="mentors-card"
      >
        <p>
           
        </p>
        <div
          className="loc-lang"
        >
          <span
            className="loc"
          />
          <span
            className="lang"
          >
            JS & ruby
          </span>
        </div>
      </div>,
      "to": "/mentors/undefined",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
             
          </p>,
          <div
            className="loc-lang"
          >
            <span
              className="loc"
            />
            <span
              className="lang"
            >
              JS & ruby
            </span>
          </div>,
        ],
        "className": "mentors-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              " ",
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            undefined,
            " ",
            undefined,
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="loc"
              />,
              <span
                className="lang"
              >
                JS & ruby
              </span>,
            ],
            "className": "loc-lang",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "loc",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "JS & ruby",
                  false,
                ],
                "className": "lang",
              },
              "ref": null,
              "rendered": Array [
                "JS & ruby",
                false,
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="mentors-card"
        >
          <p>
             
          </p>
          <div
            className="loc-lang"
          >
            <span
              className="loc"
            />
            <span
              className="lang"
            >
              JS & ruby
            </span>
          </div>
        </div>,
        "to": "/mentors/undefined",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
               
            </p>,
            <div
              className="loc-lang"
            >
              <span
                className="loc"
              />
              <span
                className="lang"
              >
                JS & ruby
              </span>
            </div>,
          ],
          "className": "mentors-card",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                " ",
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              undefined,
              " ",
              undefined,
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="loc"
                />,
                <span
                  className="lang"
                >
                  JS & ruby
                </span>,
              ],
              "className": "loc-lang",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "loc",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "JS & ruby",
                    false,
                  ],
                  "className": "lang",
                },
                "ref": null,
                "rendered": Array [
                  "JS & ruby",
                  false,
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
