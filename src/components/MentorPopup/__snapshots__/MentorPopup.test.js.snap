// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MentorPopup should match the correct default snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MentorPopup
    availability={
      Object {
        "0": Array [
          false,
          false,
          false,
        ],
        "1": Array [
          false,
          false,
          false,
        ],
        "2": Array [
          false,
          false,
          false,
        ],
        "3": Array [
          false,
          false,
          false,
        ],
        "4": Array [
          false,
          false,
          false,
        ],
        "5": Array [
          false,
          false,
          false,
        ],
        "6": Array [
          false,
          false,
          false,
        ],
      }
    }
    contact_details={
      Object {
        "slack": "user",
      }
    }
    id={1}
    identities={
      Array [
        1,
      ]
    }
    name="some name"
    non_tech_skills={
      Array [
        "skill",
      ]
    }
    sendMessage={[MockFunction]}
    tech_skills={
      Array [
        "skill",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="name"
        >
          <span>
             
             
             
          </span>
          <span>
             
             
          </span>
          <p>
            <span>
               
              1
               
            </span>
          </p>
        </div>,
        <div>
          <span>
             
          </span>
          <span>
             
          </span>
        </div>,
        <ProfileSection
          classes="contact-info"
          content={
            Array [
              <p>
                 
                slack
                : 
                user
                 
              </p>,
            ]
          }
          name="Contact Info"
        />,
        <ProfileSection
          content={
            <React.Fragment>
              <div>
                <p>
                  Tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
              <div>
                <p>
                  Non-tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
            </React.Fragment>
          }
          name="Skills"
        />,
        <ProfileSection
          classes="avail"
          content={
            Array [
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ]
          }
          name="Availability"
        />,
        <ProfileSection
          name="Background Info"
        />,
        <ProfileSection
          classes="slack-message"
          content={
            <CreateTextArea
              handleChange={[Function]}
              placeholder="Send a slack message"
              value=""
            />
          }
          name="Send a slack message"
        />,
        <div
          className="links"
        >
          <Link
            to="/mentors"
          >
            GO BACK
          </Link>
        </div>,
      ],
      "className": "mentor-popup link-content",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span>
               
               
               
            </span>,
            <span>
               
               
            </span>,
            <p>
              <span>
                 
                1
                 
              </span>
            </p>,
          ],
          "className": "name",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
                " ",
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
              " ",
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span>
                   
                  1
                   
                </span>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " ",
                    1,
                    " ",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " ",
                  1,
                  " ",
                ],
                "type": "span",
              },
            ],
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span>
               
            </span>,
            <span>
               
            </span>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
            ],
            "type": "span",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "contact-info",
          "content": Array [
            <p>
               
              slack
              : 
              user
               
            </p>,
          ],
          "name": "Contact Info",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "content": <React.Fragment>
            <div>
              <p>
                Tech Skills:
              </p>
              <span>
                 
                skill
                , 
              </span>
            </div>
            <div>
              <p>
                Non-tech Skills:
              </p>
              <span>
                 
                skill
                , 
              </span>
            </div>
          </React.Fragment>,
          "name": "Skills",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "avail",
          "content": Array [
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
            undefined,
          ],
          "name": "Availability",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "content": undefined,
          "name": "Background Info",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "slack-message",
          "content": <CreateTextArea
            handleChange={[Function]}
            placeholder="Send a slack message"
            value=""
          />,
          "name": "Send a slack message",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            to="/mentors"
          >
            GO BACK
          </Link>,
          "className": "links",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "GO BACK",
            "to": "/mentors",
          },
          "ref": null,
          "rendered": "GO BACK",
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="name"
          >
            <span>
               
               
               
            </span>
            <span>
               
               
            </span>
            <p>
              <span>
                 
                1
                 
              </span>
            </p>
          </div>,
          <div>
            <span>
               
            </span>
            <span>
               
            </span>
          </div>,
          <ProfileSection
            classes="contact-info"
            content={
              Array [
                <p>
                   
                  slack
                  : 
                  user
                   
                </p>,
              ]
            }
            name="Contact Info"
          />,
          <ProfileSection
            content={
              <React.Fragment>
                <div>
                  <p>
                    Tech Skills:
                  </p>
                  <span>
                     
                    skill
                    , 
                  </span>
                </div>
                <div>
                  <p>
                    Non-tech Skills:
                  </p>
                  <span>
                     
                    skill
                    , 
                  </span>
                </div>
              </React.Fragment>
            }
            name="Skills"
          />,
          <ProfileSection
            classes="avail"
            content={
              Array [
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ]
            }
            name="Availability"
          />,
          <ProfileSection
            name="Background Info"
          />,
          <ProfileSection
            classes="slack-message"
            content={
              <CreateTextArea
                handleChange={[Function]}
                placeholder="Send a slack message"
                value=""
              />
            }
            name="Send a slack message"
          />,
          <div
            className="links"
          >
            <Link
              to="/mentors"
            >
              GO BACK
            </Link>
          </div>,
        ],
        "className": "mentor-popup link-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span>
                 
                 
                 
              </span>,
              <span>
                 
                 
              </span>,
              <p>
                <span>
                   
                  1
                   
                </span>
              </p>,
            ],
            "className": "name",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                  " ",
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
                " ",
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span>
                     
                    1
                     
                  </span>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      " ",
                      1,
                      " ",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    " ",
                    1,
                    " ",
                  ],
                  "type": "span",
                },
              ],
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span>
                 
              </span>,
              <span>
                 
              </span>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "contact-info",
            "content": Array [
              <p>
                 
                slack
                : 
                user
                 
              </p>,
            ],
            "name": "Contact Info",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": <React.Fragment>
              <div>
                <p>
                  Tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
              <div>
                <p>
                  Non-tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
            </React.Fragment>,
            "name": "Skills",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "avail",
            "content": Array [
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
            ],
            "name": "Availability",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": undefined,
            "name": "Background Info",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "slack-message",
            "content": <CreateTextArea
              handleChange={[Function]}
              placeholder="Send a slack message"
              value=""
            />,
            "name": "Send a slack message",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              to="/mentors"
            >
              GO BACK
            </Link>,
            "className": "links",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "GO BACK",
              "to": "/mentors",
            },
            "ref": null,
            "rendered": "GO BACK",
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`MentorPopup should match the correct snapshot with availabilities 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MentorPopup
    availability={
      Object {
        "0": Array [
          false,
          true,
          false,
        ],
        "1": Array [
          false,
          true,
          false,
        ],
        "2": Array [
          false,
          true,
          false,
        ],
        "3": Array [
          false,
          true,
          false,
        ],
        "4": Array [
          false,
          true,
          false,
        ],
        "5": Array [
          false,
          true,
          false,
        ],
        "6": Array [
          false,
          true,
          false,
        ],
      }
    }
    contact_details={
      Object {
        "slack": "user",
      }
    }
    id={1}
    identities={
      Array [
        1,
      ]
    }
    name="some name"
    non_tech_skills={
      Array [
        "skill",
      ]
    }
    sendMessage={[MockFunction]}
    tech_skills={
      Array [
        "skill",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="name"
        >
          <span>
             
             
             
          </span>
          <span>
             
             
          </span>
          <p>
            <span>
               
              1
               
            </span>
          </p>
        </div>,
        <div>
          <span>
             
          </span>
          <span>
             
          </span>
        </div>,
        <ProfileSection
          classes="contact-info"
          content={
            Array [
              <p>
                 
                slack
                : 
                user
                 
              </p>,
            ]
          }
          name="Contact Info"
        />,
        <ProfileSection
          content={
            <React.Fragment>
              <div>
                <p>
                  Tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
              <div>
                <p>
                  Non-tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
            </React.Fragment>
          }
          name="Skills"
        />,
        <ProfileSection
          classes="avail"
          content={
            Array [
              <p>
                Mon
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Tue
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Wed
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Thu
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Fri
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Sat
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Sun
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
            ]
          }
          name="Availability"
        />,
        <ProfileSection
          name="Background Info"
        />,
        <ProfileSection
          classes="slack-message"
          content={
            <CreateTextArea
              handleChange={[Function]}
              placeholder="Send a slack message"
              value=""
            />
          }
          name="Send a slack message"
        />,
        <div
          className="links"
        >
          <Link
            to="/mentors"
          >
            GO BACK
          </Link>
        </div>,
      ],
      "className": "mentor-popup link-content",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span>
               
               
               
            </span>,
            <span>
               
               
            </span>,
            <p>
              <span>
                 
                1
                 
              </span>
            </p>,
          ],
          "className": "name",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
                " ",
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
              " ",
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span>
                   
                  1
                   
                </span>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " ",
                    1,
                    " ",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " ",
                  1,
                  " ",
                ],
                "type": "span",
              },
            ],
            "type": "p",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span>
               
            </span>,
            <span>
               
            </span>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                " ",
              ],
            },
            "ref": null,
            "rendered": Array [
              undefined,
              " ",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                " ",
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              " ",
              undefined,
            ],
            "type": "span",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "contact-info",
          "content": Array [
            <p>
               
              slack
              : 
              user
               
            </p>,
          ],
          "name": "Contact Info",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "content": <React.Fragment>
            <div>
              <p>
                Tech Skills:
              </p>
              <span>
                 
                skill
                , 
              </span>
            </div>
            <div>
              <p>
                Non-tech Skills:
              </p>
              <span>
                 
                skill
                , 
              </span>
            </div>
          </React.Fragment>,
          "name": "Skills",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "avail",
          "content": Array [
            <p>
              Mon
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Tue
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Wed
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Thu
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Fri
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Sat
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
            <p>
              Sun
              : 
              <span>
                Afternoon
                 
              </span>
            </p>,
          ],
          "name": "Availability",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "content": undefined,
          "name": "Background Info",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "classes": "slack-message",
          "content": <CreateTextArea
            handleChange={[Function]}
            placeholder="Send a slack message"
            value=""
          />,
          "name": "Send a slack message",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            to="/mentors"
          >
            GO BACK
          </Link>,
          "className": "links",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "GO BACK",
            "to": "/mentors",
          },
          "ref": null,
          "rendered": "GO BACK",
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="name"
          >
            <span>
               
               
               
            </span>
            <span>
               
               
            </span>
            <p>
              <span>
                 
                1
                 
              </span>
            </p>
          </div>,
          <div>
            <span>
               
            </span>
            <span>
               
            </span>
          </div>,
          <ProfileSection
            classes="contact-info"
            content={
              Array [
                <p>
                   
                  slack
                  : 
                  user
                   
                </p>,
              ]
            }
            name="Contact Info"
          />,
          <ProfileSection
            content={
              <React.Fragment>
                <div>
                  <p>
                    Tech Skills:
                  </p>
                  <span>
                     
                    skill
                    , 
                  </span>
                </div>
                <div>
                  <p>
                    Non-tech Skills:
                  </p>
                  <span>
                     
                    skill
                    , 
                  </span>
                </div>
              </React.Fragment>
            }
            name="Skills"
          />,
          <ProfileSection
            classes="avail"
            content={
              Array [
                <p>
                  Mon
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Tue
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Wed
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Thu
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Fri
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Sat
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
                <p>
                  Sun
                  : 
                  <span>
                    Afternoon
                     
                  </span>
                </p>,
              ]
            }
            name="Availability"
          />,
          <ProfileSection
            name="Background Info"
          />,
          <ProfileSection
            classes="slack-message"
            content={
              <CreateTextArea
                handleChange={[Function]}
                placeholder="Send a slack message"
                value=""
              />
            }
            name="Send a slack message"
          />,
          <div
            className="links"
          >
            <Link
              to="/mentors"
            >
              GO BACK
            </Link>
          </div>,
        ],
        "className": "mentor-popup link-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span>
                 
                 
                 
              </span>,
              <span>
                 
                 
              </span>,
              <p>
                <span>
                   
                  1
                   
                </span>
              </p>,
            ],
            "className": "name",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                  " ",
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
                " ",
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span>
                     
                    1
                     
                  </span>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      " ",
                      1,
                      " ",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    " ",
                    1,
                    " ",
                  ],
                  "type": "span",
                },
              ],
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span>
                 
              </span>,
              <span>
                 
              </span>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  undefined,
                  " ",
                ],
              },
              "ref": null,
              "rendered": Array [
                undefined,
                " ",
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " ",
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                " ",
                undefined,
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "contact-info",
            "content": Array [
              <p>
                 
                slack
                : 
                user
                 
              </p>,
            ],
            "name": "Contact Info",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": <React.Fragment>
              <div>
                <p>
                  Tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
              <div>
                <p>
                  Non-tech Skills:
                </p>
                <span>
                   
                  skill
                  , 
                </span>
              </div>
            </React.Fragment>,
            "name": "Skills",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "avail",
            "content": Array [
              <p>
                Mon
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Tue
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Wed
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Thu
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Fri
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Sat
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
              <p>
                Sun
                : 
                <span>
                  Afternoon
                   
                </span>
              </p>,
            ],
            "name": "Availability",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": undefined,
            "name": "Background Info",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "classes": "slack-message",
            "content": <CreateTextArea
              handleChange={[Function]}
              placeholder="Send a slack message"
              value=""
            />,
            "name": "Send a slack message",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              to="/mentors"
            >
              GO BACK
            </Link>,
            "className": "links",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "GO BACK",
              "to": "/mentors",
            },
            "ref": null,
            "rendered": "GO BACK",
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
